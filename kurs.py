from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, ConversationHandler, MessageHandler, \
    CallbackQueryHandler, filters
from PIL import Image, ImageDraw, ImageFont
import json
import os
import random
import logging


ASK_GROUP, CHOOSE_ACTION, ASK_DAYS, ASK_MAX_SUBJECTS, ASK_TIMINGS, ASK_DURATION, ASK_BREAK, ASK_SUBJECTS_COUNT = range(
    8)


GROUPS_FILE = "groups.json"

def clear_json_file(file_path=GROUPS_FILE):

    empty_data = {

    }
    with open(file_path, 'w', encoding='utf-8') as file:
        json.dump(empty_data, file, ensure_ascii=False, indent=4)
    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ {file_path} —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.")


def load_groups():
    if not os.path.exists(GROUPS_FILE):
        with open(GROUPS_FILE, "w", encoding="utf-8") as file:
            json.dump({}, file, ensure_ascii=False, indent=4)

    try:
        with open(GROUPS_FILE, "r", encoding="utf-8") as file:
            data = json.load(file)
            if not isinstance(data, dict):  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ ‚Äî –Ω–µ —Å–ª–æ–≤–∞—Ä—å, —Å–±—Ä–æ—Å—å—Ç–µ –∏—Ö
                logging.error("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ JSON –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–ª–æ–≤–∞—Ä—ë–º.")
                clear_json_file()
                return {}
            return data
    except (json.JSONDecodeError, ValueError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ JSON: {e}")
        clear_json_file()
        return {}



def save_groups(groups):
    if not isinstance(groups, dict):
        raise ValueError("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä—ë–º.")
    with open(GROUPS_FILE, "w", encoding="utf-8") as file:
        json.dump(groups, file, ensure_ascii=False, indent=4)




async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("üìÖ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton("üìö –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä—É–ø–ø—ã")],
        [KeyboardButton("‚ùå –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"), KeyboardButton("‚ùì –û –±–æ—Ç–µ")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )


async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ë–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫—É—Ä—Å–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –≥—Ä—É–ø–ø—ã AIN-1-24 –°–∞–≥—ã–Ω–±–µ–∫–æ–≤–æ–π –ê–π–º—É—Ä–æ–∫, –ö–ª–µ–π–º–æ–≤–∏—á –ê–Ω–≥–µ–ª–∏–Ω–æ–π –∏ –°–æ–ª–æ–≤—å—ë–≤–æ–π –Ø–Ω–æ–π.\n\n"
        "üîπ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "- –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
        "- –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
        "- –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö\n\n"
    )


async def clear_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    clear_json_file()
    await update.message.reply_text("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.")


async def choose_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data

    if action == "view_schedule":
        groups = load_groups()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã
        group_name = context.user_data.get("group_name")

        if not isinstance(groups, dict):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø ‚Äî —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
            await query.edit_message_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã.")
            return ConversationHandler.END

        group_data = groups.get(group_name, {})
        if not isinstance(group_data, dict):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
            await query.edit_message_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã.")
            return ConversationHandler.END

        schedule = group_data.get("schedule", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        if isinstance(schedule, dict):  # –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚Äî —Å–ª–æ–≤–∞—Ä—å, —Å–æ–∑–¥–∞—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_path = create_schedule_image(schedule)
            await query.message.reply_photo(photo=open(image_path, "rb"))
            os.remove(image_path)
        else:  # –ò–Ω–∞—á–µ –≤—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
            await query.edit_message_text(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã '{group_name}':\n{schedule}")

        return ConversationHandler.END


async def view_groups(update: Update, context: ContextTypes.DEFAULT_TYPE):
    groups = load_groups()
    if not groups:
        await update.message.reply_text("–ì—Ä—É–ø–ø—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    for group, data in groups.items():
        schedule = data.get("schedule", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        if schedule == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.":
            await update.message.reply_text(f"–ì—Ä—É–ø–ø–∞: {group}\n{schedule}")
        else:
            image_path = create_schedule_image(schedule)
            await update.message.reply_photo(photo=open(image_path, "rb"), caption=f"–ì—Ä—É–ø–ø–∞: {group}")
            os.remove(image_path)


async def time_table(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")
    return ASK_GROUP


async def get_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    group_name = update.message.text.strip()
    context.user_data["group_name"] = group_name
    groups = load_groups()

    keyboard = [
        [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="create_schedule")],
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="view_schedule")],
        [InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="clear_data")],  # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if group_name not in groups:
        groups[group_name] = {}
        save_groups(groups)

    await update.message.reply_text(f"–ì—Ä—É–ø–ø–∞ '{group_name}' –≤—ã–±—Ä–∞–Ω–∞. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=reply_markup)
    return CHOOSE_ACTION


async def choose_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data
    if action == "create_schedule":
        await query.edit_message_text("–°–∫–æ–ª—å–∫–æ —É—á–µ–±–Ω—ã—Ö –¥–Ω–µ–π –≤–∞–º –Ω—É–∂–Ω–æ?")
        return ASK_DAYS
    elif action == "view_schedule":
        groups = load_groups()
        group_name = context.user_data["group_name"]
        schedule = groups.get(group_name, {}).get("schedule", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        if schedule == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.":
            await query.edit_message_text(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã '{group_name}':\n{schedule}")
        else:
            image_path = create_schedule_image(schedule)
            await query.message.reply_photo(photo=open(image_path, "rb"))
            os.remove(image_path)
        return ConversationHandler.END


async def get_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        days = int(update.message.text)
        if days <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        context.user_data['days'] = days
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –¥–µ–Ω—å:")
        return ASK_MAX_SUBJECTS
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return ASK_DAYS


async def get_max_subjects(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        max_subjects = int(update.message.text)
        if max_subjects <= 0:
            raise ValueError("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        context.user_data['max_subjects'] = max_subjects
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –∑–∞–Ω—è—Ç–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ '08:00-15:00':")
        return ASK_TIMINGS
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return ASK_MAX_SUBJECTS


async def get_timings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        timings = update.message.text.split('-')
        if len(timings) != 2:
            raise ValueError("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '08:00-15:00'.")
        start_time, end_time = timings
        context.user_data['start_time'] = start_time.strip()
        context.user_data['end_time'] = end_time.strip()
        await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª–∏—Ç—Å—è –æ–¥–Ω–æ –∑–∞–Ω—è—Ç–∏–µ?")
        return ASK_DURATION
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '08:00-15:00'.")
        return ASK_TIMINGS


async def get_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        duration = int(update.message.text)
        if duration <= 0:
            raise ValueError("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        context.user_data['duration'] = duration
        await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª–∏—Ç—Å—è –ø–µ—Ä–µ—Ä—ã–≤ –º–µ–∂–¥—É –∑–∞–Ω—è—Ç–∏—è–º–∏?")
        return ASK_BREAK
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return ASK_DURATION


async def get_break(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        break_duration = int(update.message.text)
        if break_duration < 0:
            raise ValueError("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ä—ã–≤–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
        context.user_data['break_duration'] = break_duration
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞:3, –§–∏–∑–∏–∫–∞:2':")
        return ASK_SUBJECTS_COUNT
    except ValueError as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return ASK_BREAK


async def get_subjects_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        subjects_input = update.message.text.split(',')
        subjects = {}
        for item in subjects_input:
            subject, count = map(str.strip, item.split(':'))
            count = int(count)
            if count <= 0:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            subjects[subject] = count
        context.user_data['subjects'] = subjects
        await update.message.reply_text("–°–µ–π—á–∞—Å —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")


        group_name = context.user_data["group_name"]
        schedule = generate_schedule(context.user_data)
        context.user_data["schedule"] = schedule

        groups = load_groups()
        groups[group_name]["schedule"] = schedule
        save_groups(groups)

        image_path = create_schedule_image(schedule)
        await update.message.reply_photo(photo=open(image_path, "rb"))
        os.remove(image_path)

        return ConversationHandler.END
    except ValueError as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return ASK_SUBJECTS_COUNT




def generate_schedule(data):
        days = data['days']
        max_subjects = data['max_subjects']
        subjects = data['subjects']
        start_time = data['start_time']
        end_time = data['end_time']
        duration = data['duration']
        break_duration = data['break_duration']
        window_probability = 0.3

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        time_slots = []
        start_hour, start_minute = map(int, start_time.split(':'))
        end_hour, end_minute = map(int, end_time.split(':'))
        total_minutes = end_hour * 60 + end_minute - (start_hour * 60 + start_minute)

        while total_minutes >= duration + break_duration:
            start = f"{start_hour:02}:{start_minute:02}"
            start_minute += duration
            if start_minute >= 60:
                start_minute -= 60
                start_hour += 1
            end = f"{start_hour:02}:{start_minute:02}"
            time_slots.append((start, end))

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Ä—ã–≤–∞
            start_minute += break_duration
            if start_minute >= 60:
                start_minute -= 60
                start_hour += 1
            total_minutes -= (duration + break_duration)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –¥–Ω—è–º
        schedule = {f"–î–µ–Ω—å {i + 1}": [] for i in range(days)}

        for day in schedule:
            available_slots = time_slots[:]
            daily_subjects = min(len(available_slots), max_subjects)

            for i in range(daily_subjects):
                # –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
                if not available_slots:
                    break
                slot_index = random.randint(0, len(available_slots) - 1)
                time_slot = available_slots.pop(slot_index)

                # –í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
                if subjects:
                    subject = random.choice(list(subjects.keys()))
                    schedule[day].append((subject, time_slot[0], time_slot[1]))

                    # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π
                    subjects[subject] -= 1
                    if subjects[subject] == 0:
                        del subjects[subject]

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ "–æ–∫–Ω–∞" —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
                if i < daily_subjects - 1 and random.random() < window_probability and available_slots:
                    window_slot_index = random.randint(0, len(available_slots) - 1)
                    window_time_slot = available_slots.pop(window_slot_index)
                    schedule[day].append(("–û–∫–Ω–æ", window_time_slot[0], window_time_slot[1]))

            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
            schedule[day].sort(key=lambda x: x[1])

        return schedule


def create_schedule_image(schedule, file_path="schedule.png"):
        days = len(schedule)
        max_subjects = max(len(subjects) for subjects in schedule.values())

        width = 800
        height = 100 + days * (50 + max_subjects * 40)
        image = Image.new("RGB", (width, height), "white")
        draw = ImageDraw.Draw(image)

        font_path = "arial.ttf"
        font_size = 18
        font = ImageFont.truetype(font_path, font_size)

        y = 20
        for day, subjects in schedule.items():
            draw.text((20, y), day, fill="black", font=font)
            y += 40
            for subject, start_time, end_time in subjects:
                if subject == "–û–∫–Ω–æ":
                    draw.text((40, y), f"{start_time}-{end_time} | üïí –û–∫–Ω–æ", fill="red", font=font)
                else:
                    draw.text((40, y), f"{start_time}-{end_time} | {subject}", fill="black", font=font)
                y += 40
            y += 20

        image.save(file_path)
        return file_path


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.")
    return ConversationHandler.END


def main():
    logging.basicConfig(
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
    )

    logger = logging.getLogger(__name__)

    try:
        app = Application.builder().token("7889665164:AAGB2w12C2oBu2lbDsOVLgIrZyQ-QyaK0E0").build()


        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.Regex("^üìö –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä—É–ø–ø—ã$"), view_groups))
        app.add_handler(MessageHandler(filters.Regex("^‚ùå\s*–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\s*$"), clear_data))
        app.add_handler(MessageHandler(filters.Regex("‚ùì –û –±–æ—Ç–µ"), info))
        app.add_handler(ConversationHandler(
            entry_points=[MessageHandler(filters.TEXT & filters.Regex(r"^üìÖ\s*–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\s*$"), time_table)],
            states={
                ASK_GROUP: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_group)],
                CHOOSE_ACTION: [CallbackQueryHandler(choose_action)],
                ASK_DAYS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_days)],
                ASK_MAX_SUBJECTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_max_subjects)],
                ASK_TIMINGS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_timings)],
                ASK_DURATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_duration)],
                ASK_BREAK: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_break)],
                ASK_SUBJECTS_COUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_subjects_count)],
            },
            fallbacks=[CommandHandler("cancel", cancel)],
        ))

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
        app.run_polling()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()
